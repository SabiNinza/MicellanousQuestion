#include <iostream>
using namespace std;
int brain[100000]={0};
//recursive ==top down approach=O(n^k)
int ladder(int k,int n){
    if(n==0){
        return 1;
    }
    if(brain[n]!=0){
        return brain[n];
    }
    int ans=0;
    for(int i=1;i<=k;i++){
        if(n-i>=0)
        ans+=ladder(k,n-i);
    }
    return brain[n]=ans;
}
//iterative method = bottom up approach O(n^2)
int ladderIterative(int n,int k){
    int dp[100]={0};
    dp[0]=1;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=k;j++){
            if(i-j>=0){
                dp[i]+=dp[i-j];
            }
        }
    }
    return dp[n];
}
//using recurence More optimised O(n)
int ladderRec(int n,int k){
    int dp[100]={0};
    dp[0]=1;
    int c=1;
    for(int i=1;i<=k;i++){
        for(int j=1;j<=k;j++){
            if(i-j>=0)
            dp[i]=dp[i]+dp[i-j];
        }
        c++;
    }
    for(int i=c;i<=n;i++){
        if(i-k>=0)
        dp[i]=2*dp[i-1]-dp[i-k];
    }
    return dp[n];
}
int main() {
    int n;
    int k;
    cin>>n>>k;
    cout<<ladderRec(n,k);
}
